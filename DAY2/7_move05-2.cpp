// 7_move05-2.cpp   임시객체 1번에서 아래 코드 복사
#include <iostream>

class Point
{
public:
	int x, y;

	Point(int a, int b) { std::cout << "Point()" << std::endl; }
	~Point() { std::cout << "~Point()" << std::endl; }
};

int main()
{
	// 아래 한줄에 대해서 완벽히 이해해 봅시다. 
	Point pt = Point(1, 1);
	
	// C++98 문법
	// #1. 우변 표현식 "Point(1, 1)" 로 임시객체 생성
	// #2. 임시객체를 복사해서 pt 생성 - 복사 생성자가 호출되는 코드
	// 
	// => 그런데, 대부분의 컴파일러는 "임시객체를 제거" 하는 최적화 기술이 적용됩니다.	
	// => 따라서 위 코드는 이동생성자 호출 없이 인자 2개 생성자만 호출
	// 
	// => 하지만 이경우도 "복사 생성자등이 private" 에 있다면 에러 (문법위반)


	// C++11 문법
	// #1. 우변 표현식 "Point(1, 1)" 로 임시객체 생성
	// #2. 임시객체를 이동해서 pt 생성 - 이동 생성자가 호출되는 코드
	// 
	// => 그런데, 대부분의 컴파일러는 "임시객체를 제거" 하는 최적화 기술이 적용됩니다.	
	// => 따라서, 위 코드는 이동생성자 호출 없이  인자 2개 생성자만 호출
	// 
	// => 하지만 이경우도 "이동 생성자등이 private" 에 있다면 에러 (문법위반)


	// C++17 문법
	// => "임시객체의 제거" 가 "최적화" 가 아닌 "문법으로 되었습니다"
	// => "mandantory copy ellision"
	// => 무조건 "인자 2개 생성자" 만 1회 호출

	// => 복사/이동 생성자등이 private, 또는 삭제, 되었어도 에러가 아니다.
}